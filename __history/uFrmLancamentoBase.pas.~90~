unit uFrmLancamentoBase;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects,
  FMX.Controls.Presentation, FMX.Edit, uEditMoeda, FMX.Layouts, FMX.StdCtrls,
  FMX.ListBox, uCategoriaDAO, uCategoria, System.Generics.Collections,
  FMX.DateTimeCtrls, FMX.Memo.Types, FMX.ScrollBox, FMX.Memo, uLancamento,
  uUtils, uLancamentoDAO, uFrmDialog;

type
  TfrmLancamentoBase = class(TForm)
    txtLancReceita: TText;
    ltLancamento: TLayout;
    ltValor: TLayout;
    txtValor: TText;
    edtValor: TEditMoeda;
    StyleBook1: TStyleBook;
    lnValor: TLine;
    txtCategoria: TText;
    ltOcorrencia: TLayout;
    txtData: TText;
    dtData: TDateEdit;
    lnOcorrencia: TLine;
    ltObservacoes: TLayout;
    txtEntidade: TText;
    edtEntidade: TEdit;
    lnEntidade: TLine;
    ltDescricao: TLayout;
    txtDescricao: TText;
    edtDescricao: TEdit;
    lnDescricao: TLine;
    txtObservacoes: TText;
    btnCancelar: TSpeedButton;
    rtCancelar: TRectangle;
    txtCancelar: TText;
    btnSalvar: TSpeedButton;
    rtSalvar: TRectangle;
    txtSalvar: TText;
    edtObservacoes: TMemo;
    pnObservacoes: TPanel;
    cmbCategoria: TComboBox;
    lnCategoria: TLine;
    ListBox1: TListBox;
    ListBoxItem1: TListBoxItem;
    procedure btnCancelarClick(Sender: TObject);
    procedure edtValorChange(Sender: TObject);
    procedure cmbCategoriaChange(Sender: TObject);
    procedure edtDescricaoChange(Sender: TObject);
    procedure dtDataChange(Sender: TObject);
  protected
    procedure CarregarCategorias(AComboBox: TComboBox; AType: TTipoCategoria);
    function CriarLancamento(ATipo: TTipoCategoria): TLancamento;
    function ValidaCamposObrigatorios: Boolean;
  public
    { Public declarations }
  end;

var
  frmLancamentoBase: TfrmLancamentoBase;

implementation

{$R *.fmx}

function TfrmLancamentoBase.ValidaCamposObrigatorios: Boolean;
begin
  Result := False;

  // Valida o valor do lançamento
  if not ValidarDados(edtValor.Text, Moeda) then
  begin
    ExibirMensagemErro(edtValor);
    Exit;
  end;
  // Valida a data do lançamento
  if not ValidarDados(DateToStr(dtData.Date), DataHora) then
  begin
    ExibirMensagemErro(dtData);
    Exit;
  end;
  // Valida a categoria do lançamento
  if not (cmbCategoria.ItemIndex >= 0) then
  begin
    ExibirMensagemErro(cmbCategoria);
    Exit;
  end;
  // Valida a descrição do lançamento
  if not ValidarDados(edtDescricao.Text, Texto) then
  begin
    ExibirMensagemErro(edtDescricao);
    Exit;
  end;

  Result := True;
end;

function TfrmLancamentoBase.CriarLancamento(ATipo: TTipoCategoria): TLancamento;
var
  NovoLancamento: TLancamento;
begin
  Result := nil;

  try
    // Cria um objeto de lançamento com base nas informações da tela
    // É esse o objeto enviado como parâmetro ao salvar o lançamento no BD
    NovoLancamento := TLancamento.Create;
    NovoLancamento.CategoriaID := TCategoria(cmbCategoria.ListItems[cmbCategoria.ItemIndex].TagObject).ID;
    NovoLancamento.Tipo := ATipo;
    NovoLancamento.Data := dtData.Date;
    NovoLancamento.Descricao := edtDescricao.Text;
    NovoLancamento.Valor := CurrencyToFloat(edtValor.Text);
    NovoLancamento.Observacoes := edtObservacoes.Text;
    NovoLancamento.Entidade := edtEntidade.Text;

    Result := NovoLancamento;
  except
      on E: Exception do
      ShowMessage(E.Message);
  end;
end;

procedure TfrmLancamentoBase.dtDataChange(Sender: TObject);
begin
  OcultarMensagemErro(Sender);
end;

procedure TfrmLancamentoBase.edtDescricaoChange(Sender: TObject);
begin
  OcultarMensagemErro(Sender);
end;

procedure TfrmLancamentoBase.edtValorChange(Sender: TObject);
begin
  OcultarMensagemErro(Sender);
end;

procedure TfrmLancamentoBase.btnCancelarClick(Sender: TObject);
begin
  // Exibe a mensagem de confirmação
  if TfrmDialog.ShowConfirmDialog('Tem certeza? Nenhum dado alterado será salvo!') then
    Close;
end;

procedure TfrmLancamentoBase.CarregarCategorias(AComboBox: TComboBox; AType: TTipoCategoria);
var
  DAO: TCategoriaDAO;
  Lista: TObjectList<TCategoria>;
  Categoria: TCategoria;
  Item: TListBoxItem;
begin
  // Começa limpando os itens que já estavam na combobox
  AComboBox.Clear;
  // Cria o objeto de acesso ao BD
  DAO := TCategoriaDAO.Create;

  try
    // Busca todos as categorias no Banco de Dados e armazena numa lista
    Lista := DAO.BuscarCategorias;

    // Se houver algum objeto na lista...
    if Lista <> nil then
    try
      for Categoria in Lista do
      begin
        // Para cada categoria do tipo informado encontrado, é criado um novo item na TComboBox
        if Categoria.Tipo = AType then
        begin
          Item := TListBoxItem.Create(nil);
          Item.Parent := AComboBox;
          Item.Text := Categoria.Nome;
          // Aplica o estilo padrão
          Item.StyledSettings := [];
          Item.TextSettings.Font.Family := 'Montserrat';
          Item.TextSettings.Font.Size := 11;
          Item.TextSettings.FontColor := $FF34495E;
          // Vincula a categoria selecionada ao item da combobox
          Item.TagObject := Categoria;
          AComboBox.AddObject(Item);
        end;
      end;
    except
      on E: Exception do
        ShowMessage(E.Message);
    end;
  finally
    DAO.Free;
    Lista.Free;
  end;
end;

procedure TfrmLancamentoBase.cmbCategoriaChange(Sender: TObject);
begin
  OcultarMensagemErro(Sender);
end;

end.
